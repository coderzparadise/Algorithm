# -*- coding: utf-8 -*-
"""
Created on Sat Sep 24 12:41:40 2021

@author: coderzparadise
"""

### File #1
################################################
 
# Q1: single number         #1min
# input: array of integers with all nums having a duplicate except 1
# output: the single number in array that has no duplicates

# 
# Q2: remove duplicates:        #7min
# input: array of int's Sorted w/ or w/o duplicates
# output: int of length of array w/o duplicates or list of array w/o duplicates


# 
# Q3: remove element        #10min
# input: given array of integers and key_item to remove
# output: return int of length of new list w/o key_item's

#
# Q4: two sum           #10min
# inputs: array of int's and target int
# output: return index of items from array that sum to target


#
# Q5: longest_substring_no_duplicates       #10min
# input: string
# output: integer; length of longest non duplicated chars in string

#
# Q6: longest prefix
# input: 1-D array of words in a list
# output: string; longest prefix word

# 
# Q7: group anagrams
# input: 1-D array of strings
# output: a list of all anagrams grouped together correlated to each word/characters

#
# Q8: valid parenthesis
# input: a string of brackets
# output: Boolean testing if string1 passed as parameter has valid parenthesis


#
# Q9: search rotated array
# input: array sorted than can be rotated left or right, and a target integer
# output: Boolean to see if target is inside the rotated array

# 
# Q10: sqrt
# input: integer x
# output: find the number that is the sqrt or closest sqrt of integer

# 
# Q11: polish notation
# input: 1-D array of int's and operation symbols
# output: return the polish notation of the given expression

# 
# Q12: two sum - sorted
# input: given a nums array sorted and a given target int
# output: return index of nums in array that equal to target result

#
# Q13: number of islands
# input: given a 2-D array of 1's and 0's that represent land - 1 and water - 0
# output: return the total number of islands where horizontal and vertical is islands

# 
# Q14: contains duplicates
# input: given an array of numbers
# output: return boolean if contains duplicate or not

# 
# Q15: move zeros
# input: given an array of numbers
# output: move all zeros to the end and edit nums array in place


# 
# Q16: reverse string
# input: 1-D array of letters in a list
# output: reverse all letters in array inplace


# 
# Q17: intersection of arrays
# input: (2) 1-D arrays of integers
# output: list of intersecting nums from list1 and list2


# 
# Q18: binary search
# input: 1-D array of integers and target goal
# output: boolean if found target within n

# 
# Q19: first unique char
# input: given a string called string1 of letters
# output: return int index of first non-repeating char


# 
# Q20: decode string
# input: recieved a string of nums and letters and brackets [,]
# output: return string of decoded string


# 
# #Q21: max consecutive one's
# input: 1-D array of 1's and 0's 
# output: integer of the highest amount of consecutive one's

# 
# Q22: find pivot
# input: takes in 1-D array of int's
# output: return int index that has the right and left side of pivot index equal each other

# 
# Q23: how many days until a hotter day
# input: 1-D array of integers of tempertures
# output: array that shows the days until a hotter days appears corelating to temperature index

# 
# Q24: largest number that is at least double than all others
# input: 1-D array of integers greater than zero
# output: return the index of item that is 2x as big as any other integer

# 
# Q25: jewels and stones
# input: string called jewels that contain char jewels and string called stones made of char's
# output: return integer of how many stones match the type of jewels


# 
# Q26: keys and rooms
# input: 2-D array where each bucket is the room and each bucket has room keys
# output: return boolean if you come across each key from previous rooms/buckets visited
# description: you automatically get the room key 0.


# 
# Q27: squares of sorted array
# input: a sorted array of neg. and pos. integers 
# output: return a 1-D array of sorted integers that are the squares of the input array
# example: nums = [-8, -3, 0, 5, 10, 12]


# 
# Q28: find numbers with even number integers
# input: 1-D array of integers
# output: return how many integers have even amount of integers ex.) 23, 4125, 689030


# 
# Q29: check if double int exists
# input: array of integers
# output: return boolean to see if there's an integer that is double than another integer in nums




### File #2
################################################
######################################

# Q1: max product of 3 integers     #5 min
# input: int array of numbers that are + and -
# output: return an int, being the largest product produced by 3 int's


# 
# Q2: max sum of subarray       #3 min
# input: 1-d array of integers both + and -
# output: return the maximum subarray sum found


#      
# Q3: 3 sum  - 6 min
# input: an unsorted integer array w/ or w/o duplicates
# output: a list of 3 number tuplet int's that sum to target (zero), no repeats


#    #3 min
# Q4: best time to sell stock 1
# input: daily prices of stocks in a 1-d array of int's
# output: an integer of the max profit that could be made in 1 transaction

#    #1 min
# Q5: best time to sell stock 2
# input: daily prices of stocks in a 1-d array of int's
# output: an integer of the max profit that could be made in all transactions

#
# Q6: reverse integer           #2 min
# input: given integer + or -
# output: return the integer reversed unless bigger than SYS.MAXINT

#          #3 min
# Q7: is anagram
# input: 2 strings that represent words
# output: boolean checking if word 's' is anagram of word 't'

#           #3 min
# Q8: is palindrome
# input: string called 's' with spaces, nums, special chars
# output: return boolean if string is palindrome

# 
# Q9: climbing stairs           #5 min
# input: integer of how many stairs there are
# output: integer of how many ways to reach the top by either taking 1 or 2 steps at a time

#        #5 min
# Q10: fibonacci sequence (dp)
# input: integer 'n'
# output: the fibo number of 'n'

#      #6 min
# Q11: fibonacci sequence (O(1) space)
# input: integer 'n'
# output: the fibo number of 'n'

#         #3 min
# Q12: house robber
# input: 1-d array of integers that represent how much money each house has acording to its position
# output: integer, the maximum money that can be stolen not robing house directly next to each other


#       #10 min
# Q13: roman string to integer
# input: string that is written in roman
# output: integer of the roman string in numbers

#      #3 min
# Q14: integer to roman numerals
# input: integer called nums
# output: string of the corresponding integer in roman numeral form

#       #2 min    
# Q15: pascal's triangle
# input: integer of the number of rows down you want to travel pascals triangle
# output: a 2-d array of integers that represent pascals triangle

#          #1 min
# Q16: find missing number
# input: 1-d array of int
# output: integer of the missing number in the array 0..n

#        #3 min
# Q17: container with most water
# input: 1-d array of int's that represent the height of each mountain at that index
# output: integer of the maximum water being able to be held without spilling

#         #4 min
# Q18: set matrix zeros across col's and row's
# input: 2-d 'matrix' array of 1's and 0's
# output: None, edit 'matrix' in-place replacing the whole row and col where '0' are found

# 
# Q19: longest palindrome
# input: string 's' made of char's
# output: string palindrome that is the longest palindrome found in 's'


# 
# Q20: median integer of data stream
# input: 1-D array of integers called 'nums'
# output: return the median integer of the data stream
# MAX heap     -       MIN Heap
#9, 8, 4, 2    -     10, 14, 15, 17


# Q21: word search
# input: 2-d array of char's called board and a string called 'word'
# output: return boolean if word was found in board moving up,down,left,right 

#
# Q22: count words with 1 iterator
# input: string of char's and space's
# output: return integer of how many words found in string1


# 
# Q23: t9 text letter possibility combinations
# input: a string representing a number
# output: a list of string combinations made from the input representing a number


# 
# Q24: find kth largest element
# input: 1-d array of integers called nums and integer k, representing the kth largest item
# output: integer from nums array that is the kth largest item in nums


# 
# Q25: top k frequent items
# input: 1-d array 'nums' of integers that may contain duplicates and integer k 
# output: return a list of integers of len k, that apear the most frequent in 'nums'

# 
# Q26: find peak of mountain
# input: 1-d int array called nums of heights of mounain that go in a straight line
# output: integer index of the peak of the mountain found in nums array


# 
# Q27: unique num of path
# input: integer represent rows 'm', and integer representing num of columns 'n'
# output: integer of the possible ways to reach the bottom right of game board (m x n) only moving 1 right or down


# 
# Q28: longest increasing subsequence
# input: 1-d array of integers called nums
# output: return integer of the max numbers of an increasing subsequence inside nums

# 
# Q29: rotate image
# input: 2-d int array
# output: in-place, rotate the 2-d matrix 90 deg to the right

# 
# Q30: rotate array
# input: 1-d int array of numbers and k the amount to be rotated
# output: nothing, edit in-place array rotating to the right by 'k' times

# 
# Q31: get right side of BST
# input: root of BST
# output: integer values at each level that would appear first if facing BST from the right side




### File #3
################################################
######################################

# 
# Q1: Maximum Size Subarray Sum Equals k
# input: 1-d array of int's called 'nums' and integer k
# output: integer, the longest subarray that equals to k in nums 


# 
# Q2: Longest Substring with At Most K Distinct Characters
# input: string 's' of letters and integer k determing how many distinct letters we can have at a time
# output: integer of the max length substring possible with k distict letters


#
# Q3: subarray sum equals k
# input: 1-d array of int's and 'k' the integer sum goal
# output: return integer of the total amount of continious subarrays that equal to k


# 
# Q4: Sliding Window Maximum
# input: 1-d array of integers and integer 'k' that is the size of the window
# output: integer array of the all the maximum int's at each combination subarray of size k


# Q5: Top K frequent words
# input: 1-D array of string words and integer k for the amount of top freq. words
# output: a list of the top 'k' frequent words


# Q6: is palidrome (integer)
# input: integer above zero
# output: boolean determining if integer is palidrome or not


# Q7: subset sum goal
# input: given set of arr of numbers, indice of last pos of array (not length), desired goal sum
# output: subet of numbers who sum is equal to goal 
